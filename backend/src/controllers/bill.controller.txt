

const asyncHandler = require("../utils/asyncHandler");
const Customer = require("../models/customer.model");
const Bill = require("../models/bill.model");
const ApiError = require("../utils/ApiError");
const Item = require("../models/item.model");
const Brand = require("../models/brand.model");
const Location = require("../models/location.model");
const ApiResponse = require("../utils/ApiResponse");

function billDetailsValidation(customerName, customerLocation, billNumber, billDate, tax) {
    if (customerName.length < 4) {
        return {  
            success: false,
            message: "Customer name must be at least 4 characters",
        };
    }
    if (customerLocation.length < 4) {
        return {
            success: false,
            message: "Customer location must be at least 4 characters",
        };
    }
    if (billNumber.length > 30) {
        return {
            success: false,
            message: "Bill Number must be at most 30 characters",
        };
    }
    if (billDate.toString().length < 4) {
        return {
            success: false,
            message: "Bill date must be at least 4 characters",
        };
    }
    if ([tax.basic, tax.netAmount, tax.CGST.percent, tax.SGST.percent, tax.IGST.percent]
        .some(item => item < 0)
    ) {
        return {
            success: false,
            message: "Tax should not be negative",
        };
    }
    return {
        success: true,
    };
}

async function getOrCreateCustomerAndLocation(customerName, customerLocation) {
    const customerNameLower = customerName.toLowerCase();
    const customerLocationLower = customerLocation.toLowerCase();

    let customer = await Customer.findOne({ name: customerNameLower });
    if (!customer) {
        customer = await Customer.create({ name: customerNameLower });
    }

    let location = await Location.findOne({ address: customerLocationLower });
    if (!location) {
        location = await Location.create({ address: customerLocationLower });
    }

    if (!customer.location.includes(location._id)) {
        customer.location.push(location._id);
        await customer.save();
    }

    if (!location.customer.includes(customer._id)) {
        location.customer.push(customer._id);
        await location.save();
    }

    return { customer, location };
}

async function calculateBasicAndItems(items) {
    let basic = 0;
    const updatedItems = [];

    for (const element of items) {
        if (element.name.length < 4) {
            throw new ApiError(400, `Item name should be at least 4 characters, error in ${element.name}`);
        }
        if (element.brand.length < 4) {
            throw new ApiError(400, `Brand name should be at least 4 characters, error in ${element.brand}`);
        }

        const itemNameLower = element.name.toLowerCase();
        const brandNameLower = element.brand.toLowerCase();

        let item = await Item.findOne({ name: itemNameLower });
        if (!item) {
            item = await Item.create({
                name: itemNameLower,
                unit: element.unit,
                defaultRate: element.rate,
            });
        }

        let brand = await Brand.findOne({ name: brandNameLower });
        if (!brand) {
            brand = await Brand.create({ name: brandNameLower });
        }

        if (!item.brand.includes(brand._id)) {
            item.brand.push(brand._id);
            await item.save();
        }

        if (!brand.item.includes(item._id)) {
            brand.item.push(item._id);
            await brand.save();
        }

        if (element.qty < 1) {
            throw new ApiError(400, `Qty should be greater than 0, error in ${item.name}`);
        }
        if (element.rate < 1) {
            throw new ApiError(400, `Rate should be greater than 0, error in ${item.name}`);
        }

        basic += element.rate * element.qty;
        updatedItems.push({
            ...element,
            item: item._id,
            brand: brand._id
        });
    }

    return { basic, updatedItems };
}

function calculateTax(basic, tax) {
    return {
        basic: basic,
        CGST: {
            percent: tax.CGST.percent,
            value: (basic * tax.CGST.percent) / 100,
        },
        SGST: {
            percent: tax.SGST.percent,
            value: (basic * tax.SGST.percent) / 100,
        },
        IGST: {
            percent: tax.IGST.percent,
            value: (basic * tax.IGST.percent) / 100,
        },
        netAmount: basic + (basic * tax.CGST.percent) / 100 + (basic * tax.SGST.percent) / 100 + (basic * tax.IGST.percent) / 100,
    };
}

module.exports.createBill = asyncHandler(async (req, res, next) => {
    const {
        customerName,
        customerLocation,
        billNumber,
        billDate,
        items,
        tax,
    } = req.body;

    const billValidation = billDetailsValidation(customerName, customerLocation, billNumber, billDate, tax);
    if (!billValidation.success) {
        return next(new ApiError(400, billValidation.message));
    }

    const billNoExist = await Bill.findOne({ number: billNumber });
    if (billNoExist) {
        return res.status(400).json({
            success: false,
            message: "Bill Number already exists; do you want to update?",
            billExist: true,
        });
    }

    const { customer, location } = await getOrCreateCustomerAndLocation(customerName, customerLocation);
    const { basic, updatedItems } = await calculateBasicAndItems(items);

    const bill = await Bill.create({
        customer: customer._id,
        location: location._id,
        number: billNumber,
        date: billDate,
        items: updatedItems,
        tax: calculateTax(basic, tax),
    });

    return res.status(201).json(new ApiResponse(201, bill, 'Bill created successfully'));
});

module.exports.updateBill = asyncHandler(async (req, res, next) => {
    const {
        customerName,
        customerLocation,
        billNumber,
        billDate,
        items,
        tax,
    } = req.body;

    const billValidation = billDetailsValidation(customerName, customerLocation, billNumber, billDate, tax);
    if (!billValidation.success) {
        return next(new ApiError(400, billValidation.message));
    }

    const billNoExist = await Bill.findOne({ number: billNumber });
    if (!billNoExist) {
        return next(new ApiError(404, `Bill not found with this bill number: ${billNumber}`));
    }

    const { customer, location } = await getOrCreateCustomerAndLocation(customerName, customerLocation);
    const { basic, updatedItems } = await calculateBasicAndItems(items);

    const updatedBill = await Bill.updateOne(
        { number: billNumber },  // Condition to match the bill by billNumber
        {
            $set: {
                customer: customer._id,
                location: location._id,
                date: billDate,
                items: updatedItems,
                tax: calculateTax(basic, tax),
            },
        }
    );

    return res.status(200).json(new ApiResponse(200, updatedBill, 'Bill updated successfully'));
});

